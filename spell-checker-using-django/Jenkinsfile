properties([
    parameters([
        choice(
            choices: ['BRANCH', 'IMAGE'],
            description: 'You want to deploy through branch or image.',
            name: 'DEPLOYTHROUGH'
        ),
        string(
            name: 'DOCKERIMAGE',
            defaultValue: '',
            description: 'Enter docker image tag, use only when selected DEPLOYTHROUGH = IMAGE'
        ),
        choice(
            choices: ['Spell-Checker-using-Django'],
            description: 'Choose service name.',
            name: 'SERVICE'
        ),
        gitParameter(
            branch: '',
            branchFilter: '*',
            defaultValue: 'main',
            description: 'Choose the tag which need to deploy.',
            name: 'BRANCH',
            quickFilterEnabled: true,
            selectedValue: 'DEFAULT',
            sortMode: 'DESCENDING_SMART',
            tagFilter: '1*',
            credentialsId: 'spell-checker-dev',
            useRepository: 'https://github.com/MuKuLJain07/Spell-Checker-using-Django.git',
            type: 'GitParameterDefinition'
        ),
    ])
])

def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger',
]

pipeline {
    agent {
        label 'built-in'
    }
    
    options {
        disableConcurrentBuilds()
        timeout(time: 1, unit: 'HOURS')
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    
    environment {
        PATH = "/usr/sbin:/usr/bin:/sbin:/bin:$PATH"
        SERVICE_NAME = "${params.SERVICE}"
        BRANCH_NAME = "${params.BRANCH}"
    }
    
    stages {
        stage('Verify Credentials') {
            steps {
                script {
                    try {
                        withCredentials([usernamePassword(credentialsId: 'spell-checker-dev', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                            sh 'echo "Credentials verified successfully"'
                        }
                    } catch (Exception e) {
                        error "Failed to verify credentials: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage("Set Build Name") {
            steps {
                script {
                    currentBuild.displayName = "${env.SERVICE_NAME}-${BUILD_NUMBER}"
                    currentBuild.description = "${env.SERVICE_NAME}-${BUILD_NUMBER}"
                }
            }
        }
        
        stage('Git Checkout') {
            steps {
                dir('Spell-Checker-using-Django') {
                    deleteDir()
                    script {
                        try {
                            checkout([$class: 'GitSCM',
                                branches: [[name: "${env.BRANCH_NAME}"]],
                                userRemoteConfigs: [[
                                    credentialsId: 'spell-checker-dev',
                                    url: 'https://github.com/MuKuLJain07/Spell-Checker-using-Django.git'
                                ]],
                                extensions: [[$class: 'CloneOption', 
                                    depth: 1, 
                                    noTags: false, 
                                    reference: '', 
                                    shallow: true]]
                            ])
                        } catch (Exception e) {
                            error "Failed to checkout repository: ${e.getMessage()}"
                        }
                    }
                }
            }
        }
        
        stage('Devops Clone') {
            steps {
                dir('devops') {
                    script {
                        try {
                            checkout([$class: 'GitSCM',
                                branches: [[name: 'main']],
                                userRemoteConfigs: [[
                                    credentialsId: 'spell-checker-dev',
                                    url: 'https://github.com/MuKuLJain07/deployment.git'
                                ]],
                                extensions: [[$class: 'CloneOption', 
                                    depth: 1, 
                                    noTags: false, 
                                    reference: '', 
                                    shallow: true]]
                            ])
                        } catch (Exception e) {
                            error "Failed to checkout devops repository: ${e.getMessage()}"
                        }
                    }
                }
            }
        }
        
        stage('Code Combine') {
            when {
                expression { params.DEPLOYTHROUGH == 'BRANCH' }
            }
            steps {
                script {
                    try {
                        sh """
                            cd ~/services/${env.SERVICE_NAME}
                            cp -r ${WORKSPACE}/Spell-Checker-using-Django ~/services/${env.SERVICE_NAME}/
                            cp -r ${WORKSPACE}/devops ~/services/${env.SERVICE_NAME}/
                            rm -rf ~/Spell-Checker-using-Django
                        """
                    } catch (Exception e) {
                        error "Failed to combine code: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Docker Build') {
            when {
                expression { params.DEPLOYTHROUGH == 'BRANCH' }
            }
            steps {
                script {
                    try {
                        def imageTag = "${env.SERVICE_NAME}-${BUILD_NUMBER}"
                        sh """
                            cd ${WORKSPACE}/
                            cp -r ~/services/${env.SERVICE_NAME}/devops/Spell-Checker-using-Django/Dockerfile ~/services/${env.SERVICE_NAME}/Spell-Checker-using-Django
                            cd ~/services/${env.SERVICE_NAME}/
                            docker build . -t spell-checker:${imageTag}
                        """
                    } catch (Exception e) {
                        error "Failed to build Docker image: ${e.getMessage()}"
                    }
                }
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
        always {
            cleanWs()
        }
    }
}